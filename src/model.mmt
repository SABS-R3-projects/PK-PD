[[model]]
desc: initiation of state variables
BolusDosing.y1 = 0
BolusDosing.y2 = 0
BolusDosing.y3 = 0

SubcutaneousDosing.y0 = 0
SubcutaneousDosing.y1 = 0
SubcutaneousDosing.y2 = 0
SubcutaneousDosing.y3 = 0

[BolusDosing]
time = 0 bind time
dose = 0 bind pace

CL = 0
Vc = 0
Vp1 = 0
Vp2 = 0
Qp1 = 0
Qp2 = 0

dot(y1) = dose - y1 * CL / Vc - Qp1 * (y1 / Vc - y2 / Vp1) - Qp2 * (y1 / Vc - y3 / Vp2)
dot(y2) = Qp1 * (y1 / Vc - y2 / Vp1)
dot(y3) = Qp2 * (y1 / Vc - y3 / Vp2)

[SubcutaneousDosing]
use BolusDosing.time as time
use BolusDosing.dose as dose

ka = 0 [1/h]
CL = 0 [mL/h]
Vc = 0 [mL]
Vp1 = 0 [mL]
Vp2 = 0 [mL]
Qp1 = 0 [mL/h]
Qp2 = 0 [mL/h]

dot(y0) = dose - ka * y0
dot(y1) = - y1 * CL / Vc - Qp1 * (y1 / Vc - y2 / Vp1) - Qp2 * (y1 / Vc - y3 / Vp2)
dot(y2) = Qp1 * (y1 / Vc - y2 / Vp1)
dot(y3) = Qp2 * (y1 / Vc - y3 / Vp2)

[[protocol]]
## Single dose
# Level  Start    Length   Period   Multiplier
1.0      0.0       0.1      0         0

## Perdiodic dosing
# Level  Start    Length   Period   Multiplier
#1.0      0.0       0.1      8         0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)


def run_simulation(duration, b_value):
    # Run simulation
    s.set_constant('LVmodel.b', b_value)
    d = s.run(duration)
        
    # Display the results
    plt.figure()
    for state in m.states():
        var = state.qname()
        plt.plot(d.time(), d[var], label=var)
    
    plt.ylabel('state variables')
    plt.xlabel('time')    
    plt.legend()
    plt.show()
    
#    # Plot x vs y
#    plt.figure()
#    state_variables = list(m.states())
#    plt.plot(d[state_variables[0]], d[state_variables[1]])
#    plt.xlabel(state_variables[0])
#    plt.ylabel(state_variables[1])
#    plt.show()

run_simulation(20, 2)
s.reset()
run_simulation(20, 3)

